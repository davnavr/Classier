[<RequireQualifiedAccess>]
module Classier.NET.Compiler.Print

open System

open Classier.NET.Compiler.IR

type Print = Print of ((string -> unit) -> unit)

let nothing = Print ignore
let it out (Print p) = p out

let many plist =
    Print (fun prnt ->
        Seq.iter
            (it prnt)
            plist)

type PrintBuilder() =
    member _.Combine(Print p1, Print p2) =
        Print (fun out -> p1 out; p2 out)
    member _.Delay f =
        Print (fun out -> f() |> it out)
    member _.For(items, f) =
        Seq.map f items |> many
    member _.Yield (p: Print) = p
    member _.Zero() = nothing

let print = PrintBuilder()

let str s = Print (fun prnt -> prnt s)
let strf format = printf format |> str

let line p = many [ p; str "\n" ]

let strl s = str s |> line

let indented by p = many [ String(' ', by) |> str; p ]

let block indent p =
    print {
        strl "{"
        indented indent p
        strl "}"
    }

let pepoint output indent =
    match output.EntryPoint with
    | Some epoint ->
        print {
            strl "internal static class _EntryPoint"

            seq {
                str "private static void Main()"
            }
            |> many
            |> block indent
        }
    | None -> strl "// No entry point"

let poutput (output: GenOutput) indent = // TODO: How will namespaces be included?
    print {
        strl "// <auto-generated />"
        strl "#pragma warning disable"
        pepoint output indent
    }
