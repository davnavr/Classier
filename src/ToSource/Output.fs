namespace Classier.NET.Compiler.ToSource

open System.Collections.Immutable
open Classier.NET.Compiler.IR
open Classier.NET.Compiler.Grammar

type Output =
    { Definitions: ImmutableList<GenType>
      EntryPoint: EntryPoint option }

[<RequireQualifiedAccess>]
module Output =
    [<System.Obsolete>]
    let write output prnt = // TODO: prnt should instead be a function that doesn't print to a new line.
        let block lines =
            seq {
                "{"
                yield! lines
                "#line hidden"
                "}"
            }

        let rec expr e = // TODO: Make this tail-recursive
            match e with
            | FuncCall call ->
                call.Arguments
                |> Seq.map expr
                |> String.concat ", "
                |> sprintf
                    "%s(%s)"
                    (expr call.Target)
            | IdentifierRef id -> string id.Name
            | MemberAccess (e, id) -> sprintf "%s.%s" (expr e) (string id.Name)
            | StrLit str -> sprintf "\"%s\"" str
            | _ ->
                sprintf "#error bad expr /*%A*/" e

        let body (statements: seq<PStatement>) = // TODO: Create a new type for validated statements.
            statements
            |> Seq.map
                (fun (pos, st) ->
                    seq {
                        sprintf // NOTE: These is all quick hacks and low quality code just so I can "Hello World" sooner.
                            "#line %i \"%s\""
                            pos.Line
                            pos.StreamName

                        match st with
                        | IgnoredExpr e -> expr e
                        | _ -> "#error Bad statement"

                        ";"
                    })
            |> Seq.collect id
            |> block

        fun() ->
            seq {
                "// <auto-generated />"
                "#pragma warning disable"
                "#line hidden"

                match output.EntryPoint with
                | Some epoint ->
                    "static class ____Program"
                    yield! block
                        [
                            "private static void Main(string[] ___args)"
                            yield! body epoint.Body
                        ]
                | None -> "// No entry point"

                "#pragma warning restore"
            }
            |> Seq.iter prnt
